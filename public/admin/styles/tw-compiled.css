/*! tailwindcss v4.1.8 | MIT License | https://tailwindcss.com */
@layer properties {
  @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or
    ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {
    *,
    :before,
    :after,
    ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-border-style: solid;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-backdrop-blur: initial;
      --tw-backdrop-brightness: initial;
      --tw-backdrop-contrast: initial;
      --tw-backdrop-grayscale: initial;
      --tw-backdrop-hue-rotate: initial;
      --tw-backdrop-invert: initial;
      --tw-backdrop-opacity: initial;
      --tw-backdrop-saturate: initial;
      --tw-backdrop-sepia: initial;
      --tw-duration: initial;
      --tw-scale-x: 1;
      --tw-scale-y: 1;
      --tw-scale-z: 1;
    }
  }
}

@layer theme {
  :root,
  :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
      "Liberation Mono", "Courier New", monospace;
    --color-gray-600: oklch(44.6% 0.03 256.802);
    --color-black: #000;
    --spacing: 0.25rem;
    --container-3xs: 16rem;
    --container-3xl: 48rem;
    --container-4xl: 56rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: 1.5;
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: 1.2;
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --leading-tight: 1.25;
    --radius-md: 0.375rem;
    --radius-lg: 0.5rem;
    --radius-xl: 0.75rem;
    --default-transition-duration: 0.15s;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}

@layer base {
  *,
  :after,
  :before,
  ::backdrop {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  ::file-selector-button {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }

  html,
  :host {
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    line-height: 1.5;
    font-family: var(
      --default-font-family,
      ui-sans-serif,
      system-ui,
      sans-serif,
      "Apple Color Emoji",
      "Segoe UI Emoji",
      "Segoe UI Symbol",
      "Noto Color Emoji"
    );
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }

  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }

  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-size: inherit;
    font-weight: inherit;
  }

  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }

  b,
  strong {
    font-weight: bolder;
  }

  code,
  kbd,
  samp,
  pre {
    font-family: var(
      --default-mono-font-family,
      ui-monospace,
      SFMono-Regular,
      Menlo,
      Monaco,
      Consolas,
      "Liberation Mono",
      "Courier New",
      monospace
    );
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(
      --default-mono-font-variation-settings,
      normal
    );
    font-size: 1em;
  }

  small {
    font-size: 80%;
  }

  sub,
  sup {
    vertical-align: baseline;
    font-size: 75%;
    line-height: 0;
    position: relative;
  }

  sub {
    bottom: -0.25em;
  }

  sup {
    top: -0.5em;
  }

  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }

  :-moz-focusring {
    outline: auto;
  }

  progress {
    vertical-align: baseline;
  }

  summary {
    display: list-item;
  }

  ol,
  ul,
  menu {
    list-style: none;
  }

  img,
  svg,
  video,
  canvas,
  audio,
  iframe,
  embed,
  object {
    vertical-align: middle;
    display: block;
  }

  img,
  video {
    max-width: 100%;
    height: auto;
  }

  button,
  input,
  select,
  optgroup,
  textarea {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }

  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }

  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }

  ::file-selector-button {
    margin-inline-end: 4px;
  }

  ::placeholder {
    opacity: 1;
  }

  @supports (not ((-webkit-appearance: -apple-pay-button))) or
    (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentColor;
    }

    @supports (color: color-mix(in lab, red, red)) {
      ::placeholder {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }

  textarea {
    resize: vertical;
  }

  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }

  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }

  ::-webkit-datetime-edit {
    display: inline-flex;
  }

  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }

  ::-webkit-datetime-edit {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-year-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-month-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-day-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-hour-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-minute-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-second-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-millisecond-field {
    padding-block: 0;
  }

  ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }

  :-moz-ui-invalid {
    box-shadow: none;
  }

  button,
  input:where([type="button"], [type="reset"], [type="submit"]) {
    appearance: button;
  }

  ::file-selector-button {
    appearance: button;
  }

  ::-webkit-inner-spin-button {
    height: auto;
  }

  ::-webkit-outer-spin-button {
    height: auto;
  }

  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }

  :where(:root),
  :root:has(input.theme-controller[value="light"]:checked),
  [data-theme="light"] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }

  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }

  :root {
    scrollbar-color: currentColor #0000;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }

  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }

  :root:has(
      .modal-open,
      .modal[open],
      .modal:target,
      .modal-toggle:checked,
      .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked
    ) {
    overflow: hidden;
  }

  :where(
      :root:has(
          .modal-open,
          .modal[open],
          .modal:target,
          .modal-toggle:checked,
          .drawer:not(.drawer-open) > .drawer-toggle:checked
        )
    ) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(
      var(--color-base-100),
      var(--color-base-100)
    );
    --root-bg: var(--color-base-100);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :where(
        :root:has(
            .modal-open,
            .modal[open],
            .modal:target,
            .modal-toggle:checked,
            .drawer:not(.drawer-open) > .drawer-toggle:checked
          )
      ) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }

  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(
      .modal-start,
      .modal-end
    ) {
    scrollbar-gutter: stable;
  }

  :root,
  [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}

@layer components;
@layer utilities {
  .drawer-side {
    pointer-events: none;
    visibility: hidden;
    z-index: 1;
    overscroll-behavior: contain;
    opacity: 0;
    width: 100%;
    transition: opacity 0.2s ease-out 0.1s allow-discrete,
      visibility 0.3s ease-out 0.1s allow-discrete;
    inset-inline-start: 0;
    grid-template-rows: repeat(1, minmax(0, 1fr));
    grid-template-columns: repeat(1, minmax(0, 1fr));
    grid-row-start: 1;
    grid-column-start: 1;
    place-items: flex-start start;
    height: 100dvh;
    display: grid;
    position: fixed;
    top: 0;
    overflow: hidden;
  }

  .drawer-side > .drawer-overlay {
    cursor: pointer;
    background-color: #0006;
    place-self: stretch stretch;
    position: sticky;
    top: 0;
  }

  .drawer-side > * {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .drawer-side > :not(.drawer-overlay) {
    will-change: transform;
    transition: translate 0.3s ease-out;
    translate: -100%;
  }

  [dir="rtl"] :is(.drawer-side > :not(.drawer-overlay)) {
    translate: 100%;
  }

  .drawer-toggle {
    appearance: none;
    opacity: 0;
    width: 0;
    height: 0;
    position: fixed;
  }

  .drawer-toggle:checked ~ .drawer-side {
    pointer-events: auto;
    visibility: visible;
    opacity: 1;
    overflow-y: auto;
  }

  .drawer-toggle:checked ~ .drawer-side > :not(.drawer-overlay) {
    translate: 0%;
  }

  .drawer-toggle:focus-visible ~ .drawer-content label.drawer-button {
    outline-offset: 2px;
    outline: 2px solid;
  }

  .menu {
    --menu-active-fg: var(--color-neutral-content);
    --menu-active-bg: var(--color-neutral);
    flex-flow: column wrap;
    width: fit-content;
    padding: 0.5rem;
    font-size: 0.875rem;
    display: flex;
  }

  .menu :where(li ul) {
    white-space: nowrap;
    margin-inline-start: 1rem;
    padding-inline-start: 0.5rem;
    position: relative;
  }

  .menu :where(li ul):before {
    background-color: var(--color-base-content);
    opacity: 0.1;
    width: var(--border);
    content: "";
    inset-inline-start: 0;
    position: absolute;
    top: 0.75rem;
    bottom: 0.75rem;
  }

  .menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
    display: none;
  }

  .menu :where(li:not(.menu-title) > :not(ul, details, .menu-title, .btn)),
  .menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
    border-radius: var(--radius-field);
    text-align: start;
    text-wrap: balance;
    -webkit-user-select: none;
    user-select: none;
    grid-auto-columns: minmax(auto, max-content) auto max-content;
    grid-auto-flow: column;
    align-content: flex-start;
    align-items: center;
    gap: 0.5rem;
    padding-block: 0.375rem;
    padding-inline: 0.75rem;
    transition-property: color, background-color, box-shadow;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    display: grid;
  }

  .menu :where(li > details > summary) {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .menu :where(li > details > summary) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .menu :where(li > details > summary)::-webkit-details-marker {
    display: none;
  }

  :is(
      .menu :where(li > details > summary),
      .menu :where(li > .menu-dropdown-toggle)
    ):after {
    content: "";
    transform-origin: 50%;
    pointer-events: none;
    justify-self: flex-end;
    width: 0.375rem;
    height: 0.375rem;
    transition-property: rotate, translate;
    transition-duration: 0.2s;
    display: block;
    translate: 0 -1px;
    rotate: -135deg;
    box-shadow: inset 2px 2px;
  }

  .menu :where(li > details[open] > summary):after,
  .menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
    translate: 0 1px;
    rotate: 45deg;
  }

  .menu
    :where(
      li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
      li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
    ):not(.menu-active, :active, .btn).menu-focus,
  .menu
    :where(
      li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
      li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
    ):not(.menu-active, :active, .btn):focus-visible {
    cursor: pointer;
    background-color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .menu
      :where(
        li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
        li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
      ):not(.menu-active, :active, .btn).menu-focus,
    .menu
      :where(
        li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
        li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
      ):not(.menu-active, :active, .btn):focus-visible {
      background-color: color-mix(
        in oklab,
        var(--color-base-content) 10%,
        transparent
      );
    }
  }

  .menu
    :where(
      li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
      li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
    ):not(.menu-active, :active, .btn).menu-focus,
  .menu
    :where(
      li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
      li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
    ):not(.menu-active, :active, .btn):focus-visible {
    color: var(--color-base-content);
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .menu
      :where(
        li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
        li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
      ):not(.menu-active, :active, .btn).menu-focus,
    .menu
      :where(
        li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
        li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
      ):not(.menu-active, :active, .btn):focus-visible {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .menu
    :where(
      li:not(.menu-title, .disabled)
        > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover,
      li:not(.menu-title, .disabled)
        > details
        > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
    ) {
    cursor: pointer;
    background-color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .menu
      :where(
        li:not(.menu-title, .disabled)
          > :not(ul, details, .menu-title):not(
            .menu-active,
            :active,
            .btn
          ):hover,
        li:not(.menu-title, .disabled)
          > details
          > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
      ) {
      background-color: color-mix(
        in oklab,
        var(--color-base-content) 10%,
        transparent
      );
    }
  }

  .menu
    :where(
      li:not(.menu-title, .disabled)
        > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover,
      li:not(.menu-title, .disabled)
        > details
        > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
    ) {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .menu
      :where(
        li:not(.menu-title, .disabled)
          > :not(ul, details, .menu-title):not(
            .menu-active,
            :active,
            .btn
          ):hover,
        li:not(.menu-title, .disabled)
          > details
          > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
      ) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .menu
    :where(
      li:not(.menu-title, .disabled)
        > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover,
      li:not(.menu-title, .disabled)
        > details
        > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
    ) {
    box-shadow: inset 0 1px #00000003, inset 0 -1px #ffffff03;
  }

  .menu :where(li:empty) {
    background-color: var(--color-base-content);
    opacity: 0.1;
    height: 1px;
    margin: 0.5rem 1rem;
  }

  .menu :where(li) {
    flex-flow: column wrap;
    flex-shrink: 0;
    align-items: stretch;
    display: flex;
    position: relative;
  }

  .menu :where(li) .badge {
    justify-self: flex-end;
  }

  .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
  .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
  .menu :where(li) > details > summary:active {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
    .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
    .menu :where(li) > details > summary:active {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
  .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
  .menu :where(li) > details > summary:active {
    color: var(--menu-active-fg);
    background-color: var(--menu-active-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }

  :is(
      .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
      .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
      .menu :where(li) > details > summary:active
    ):not(
      :is(
          .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
          .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
          .menu :where(li) > details > summary:active
        ):active
    ) {
    box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
  }

  .menu :where(li).menu-disabled {
    pointer-events: none;
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .menu :where(li).menu-disabled {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }

  .menu .dropdown:focus-within .menu-dropdown-toggle:after {
    translate: 0 1px;
    rotate: 45deg;
  }

  .menu .dropdown-content {
    margin-top: 0.5rem;
    padding: 0.5rem;
  }

  .menu .dropdown-content:before {
    display: none;
  }

  .dock {
    z-index: 1;
    background-color: var(--color-base-100);
    color: currentColor;
    border-top: 0.5px solid var(--color-base-content);
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
    width: 100%;
    padding: 0.5rem;
    display: flex;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .dock {
      border-top: 0.5px solid
        color-mix(in oklab, var(--color-base-content) 5%, #0000);
    }
  }

  .dock {
    height: 4rem;
    height: calc(4rem + env(safe-area-inset-bottom));
    padding-bottom: env(safe-area-inset-bottom);
  }

  .dock > * {
    cursor: pointer;
    border-radius: var(--radius-box);
    background-color: #0000;
    flex-direction: column;
    flex-shrink: 1;
    flex-basis: 100%;
    justify-content: center;
    align-items: center;
    gap: 1px;
    max-width: 8rem;
    height: 100%;
    margin-bottom: 0.5rem;
    transition: opacity 0.2s ease-out;
    display: flex;
    position: relative;
  }

  @media (hover: hover) {
    .dock > :hover {
      opacity: 0.8;
    }
  }

  :is(.dock > [aria-disabled="true"], .dock > [disabled]),
  :is(.dock > [aria-disabled="true"], .dock > [disabled]):hover {
    pointer-events: none;
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(.dock > [aria-disabled="true"], .dock > [disabled]),
    :is(.dock > [aria-disabled="true"], .dock > [disabled]):hover {
      color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }

  :is(.dock > [aria-disabled="true"], .dock > [disabled]),
  :is(.dock > [aria-disabled="true"], .dock > [disabled]):hover {
    opacity: 1;
  }

  .dock > * .dock-label {
    font-size: 0.6875rem;
  }

  .dock > :after {
    content: "";
    background-color: #0000;
    border-top: 3px solid #0000;
    border-radius: 3.40282e38px;
    width: 1.5rem;
    height: 0.25rem;
    transition: background-color 0.1s ease-out, text-color 0.1s ease-out,
      width 0.1s ease-out;
    position: absolute;
    bottom: 0.2rem;
  }

  .dropdown {
    position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
    display: inline-block;
    position: relative;
  }

  .dropdown > :not(summary):focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .dropdown > :not(summary):focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .dropdown .dropdown-content {
    position: absolute;
  }

  .dropdown:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within)
    .dropdown-content {
    transform-origin: top;
    opacity: 0;
    display: none;
    scale: 95%;
  }

  .dropdown[popover],
  .dropdown .dropdown-content {
    z-index: 999;
    transition-behavior: allow-discrete;
    transition-property: opacity, scale, display;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    animation: 0.2s dropdown;
  }

  @starting-style {
    .dropdown[popover],
    .dropdown .dropdown-content {
      opacity: 0;
      scale: 95%;
    }
  }

  :is(
      .dropdown.dropdown-open,
      .dropdown:not(.dropdown-hover):focus,
      .dropdown:focus-within
    )
    > [tabindex]:first-child {
    pointer-events: none;
  }

  :is(
      .dropdown.dropdown-open,
      .dropdown:not(.dropdown-hover):focus,
      .dropdown:focus-within
    )
    .dropdown-content {
    opacity: 1;
  }

  .dropdown.dropdown-hover:hover .dropdown-content {
    opacity: 1;
    scale: 100%;
  }

  .dropdown:is(details) summary::-webkit-details-marker {
    display: none;
  }

  :is(.dropdown.dropdown-open, .dropdown:focus, .dropdown:focus-within)
    .dropdown-content {
    scale: 100%;
  }

  .dropdown:where([popover]) {
    background: 0 0;
  }

  .dropdown[popover] {
    color: inherit;
    position: fixed;
  }

  @supports not (position-area: bottom) {
    .dropdown[popover] {
      margin: auto;
    }

    .dropdown[popover].dropdown-open:not(:popover-open) {
      transform-origin: top;
      opacity: 0;
      display: none;
      scale: 95%;
    }

    .dropdown[popover]::backdrop {
      background-color: oklab(0% none none/.3);
    }
  }

  .dropdown[popover]:not(.dropdown-open, :popover-open) {
    transform-origin: top;
    opacity: 0;
    display: none;
    scale: 95%;
  }

  :where(.btn) {
    width: unset;
  }

  .btn {
    cursor: pointer;
    text-align: center;
    vertical-align: middle;
    outline-offset: 2px;
    webkit-user-select: none;
    -webkit-user-select: none;
    user-select: none;
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    --tw-prose-links: var(--btn-fg);
    height: var(--size);
    font-size: var(--fontsize, 0.875rem);
    outline-color: var(--btn-color, var(--color-base-content));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
    touch-action: manipulation;
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset,
      var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 10);
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-wrap: nowrap;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    gap: 0.375rem;
    font-weight: 600;
    transition-property: color, background-color, border-color, box-shadow;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    display: inline-flex;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-border: color-mix(
        in oklab,
        var(--btn-bg),
        #000 calc(var(--depth) * 5%)
      );
    }
  }

  .btn {
    --btn-shadow: 0 3px 2px -2px var(--btn-bg), 0 4px 3px -2px var(--btn-bg);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg)
              calc(var(--depth) * 30%), #0000),
        0 4px 3px -2px color-mix(in oklab, var(--btn-bg)
              calc(var(--depth) * 30%), #0000);
    }
  }

  .btn {
    --btn-noise: var(--fx-noise);
  }

  .prose .btn {
    text-decoration-line: none;
  }

  @media (hover: hover) {
    .btn:hover {
      --btn-bg: var(--btn-color, var(--color-base-200));
    }

    @supports (color: color-mix(in lab, red, red)) {
      .btn:hover {
        --btn-bg: color-mix(
          in oklab,
          var(--btn-color, var(--color-base-200)),
          #000 7%
        );
      }
    }
  }

  .btn:focus-visible {
    isolation: isolate;
    outline-width: 2px;
    outline-style: solid;
  }

  .btn:active:not(.btn-active) {
    --btn-bg: var(--btn-color, var(--color-base-200));
    translate: 0 0.5px;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:active:not(.btn-active) {
      --btn-bg: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-200)),
        #000 5%
      );
    }
  }

  .btn:active:not(.btn-active) {
    --btn-border: var(--btn-color, var(--color-base-200));
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:active:not(.btn-active) {
      --btn-border: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-200)),
        #000 7%
      );
    }
  }

  .btn:active:not(.btn-active) {
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
  }

  .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
    background-color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
      background-color: color-mix(
        in oklab,
        var(--color-base-content) 10%,
        transparent
      );
    }
  }

  .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
    box-shadow: none;
  }

  .btn:is(:disabled, [disabled], .btn-disabled) {
    pointer-events: none;
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled) {
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
  }

  @media (hover: hover) {
    .btn:is(:disabled, [disabled], .btn-disabled):hover {
      pointer-events: none;
      background-color: var(--color-neutral);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .btn:is(:disabled, [disabled], .btn-disabled):hover {
        background-color: color-mix(
          in oklab,
          var(--color-neutral) 20%,
          transparent
        );
      }
    }

    .btn:is(:disabled, [disabled], .btn-disabled):hover {
      --btn-border: #0000;
      --btn-fg: var(--color-base-content);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .btn:is(:disabled, [disabled], .btn-disabled):hover {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
    }
  }

  .btn:is(input[type="checkbox"], input[type="radio"]) {
    appearance: none;
  }

  .btn:is(input[type="checkbox"], input[type="radio"]):after {
    content: attr(aria-label);
  }

  .btn:where(input:checked:not(.filter .btn)) {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
    isolation: isolate;
  }

  .loading {
    pointer-events: none;
    aspect-ratio: 1;
    vertical-align: middle;
    width: calc(var(--size-selector, 0.25rem) * 6);
    background-color: currentColor;
    display: inline-block;
    -webkit-mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
    -webkit-mask-position: 50%;
    mask-position: 50%;
    -webkit-mask-size: 100%;
    mask-size: 100%;
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
  }

  .invisible {
    visibility: hidden;
  }

  .list {
    flex-direction: column;
    font-size: 0.875rem;
    display: flex;
  }

  .list :where(.list-row) {
    --list-grid-cols: minmax(0, auto) 1fr;
    border-radius: var(--radius-box);
    word-break: break-word;
    grid-auto-flow: column;
    grid-template-columns: var(--list-grid-cols);
    gap: 1rem;
    padding: 1rem;
    display: grid;
    position: relative;
  }

  .list :where(.list-row):has(.list-col-grow:first-child) {
    --list-grid-cols: 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(2)) {
    --list-grid-cols: minmax(0, auto) 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(3)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(4)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(5)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto)
      minmax(0, auto) 1fr;
  }

  .list :where(.list-row):has(.list-col-grow:nth-child(6)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto)
      minmax(0, auto) minmax(0, auto) 1fr;
  }

  .list :where(.list-row) :not(.list-col-wrap) {
    grid-row-start: 1;
  }

  :is(
      .list > :not(:last-child).list-row,
      .list > :not(:last-child) .list-row
    ):after {
    content: "";
    border-bottom: var(--border) solid;
    inset-inline: var(--radius-box);
    border-color: var(--color-base-content);
    position: absolute;
    bottom: 0;
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(
        .list > :not(:last-child).list-row,
        .list > :not(:last-child) .list-row
      ):after {
      border-color: color-mix(
        in oklab,
        var(--color-base-content) 5%,
        transparent
      );
    }
  }

  .table {
    border-radius: var(--radius-box);
    text-align: left;
    width: 100%;
    font-size: 0.875rem;
    position: relative;
  }

  .table:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    text-align: right;
  }

  @media (hover: hover) {
    :is(.table tr.row-hover, .table tr.row-hover:nth-child(2n)):hover {
      background-color: var(--color-base-200);
    }
  }

  .table :where(th, td) {
    vertical-align: middle;
    padding-block: 0.75rem;
    padding-inline: 1rem;
  }

  .table :where(thead, tfoot) {
    white-space: nowrap;
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead, tfoot) {
      color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }

  .table :where(thead, tfoot) {
    font-size: 0.875rem;
    font-weight: 600;
  }

  .table :where(tfoot) {
    border-top: var(--border) solid var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tfoot) {
      border-top: var(--border) solid
        color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }

  .table :where(.table-pin-rows thead tr) {
    z-index: 1;
    background-color: var(--color-base-100);
    position: sticky;
    top: 0;
  }

  .table :where(.table-pin-rows tfoot tr) {
    z-index: 1;
    background-color: var(--color-base-100);
    position: sticky;
    bottom: 0;
  }

  .table :where(.table-pin-cols tr th) {
    background-color: var(--color-base-100);
    position: sticky;
    left: 0;
    right: 0;
  }

  .table :where(thead tr, tbody tr:not(:last-child)) {
    border-bottom: var(--border) solid var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead tr, tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid
        color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }

  .steps {
    counter-reset: step;
    grid-auto-columns: 1fr;
    grid-auto-flow: column;
    display: inline-grid;
    overflow: auto hidden;
  }

  .steps .step {
    text-align: center;
    --step-bg: var(--color-base-300);
    --step-fg: var(--color-base-content);
    grid-template-rows: 40px 1fr;
    grid-template-columns: auto;
    place-items: center;
    min-width: 4rem;
    display: grid;
  }

  .steps .step:before {
    width: 100%;
    height: 0.5rem;
    color: var(--step-bg);
    background-color: var(--step-bg);
    --tw-content: "";
    content: var(--tw-content);
    border: 1px solid;
    grid-row-start: 1;
    grid-column-start: 1;
    margin-inline-start: -100%;
    top: 0;
  }

  .steps .step > .step-icon,
  .steps .step:not(:has(.step-icon)):after {
    content: counter(step);
    counter-increment: step;
    z-index: 1;
    color: var(--step-fg);
    background-color: var(--step-bg);
    border: 1px solid var(--step-bg);
    border-radius: 3.40282e38px;
    grid-row-start: 1;
    grid-column-start: 1;
    place-self: center;
    place-items: center;
    width: 2rem;
    height: 2rem;
    display: grid;
    position: relative;
  }

  .steps .step:first-child:before {
    content: none;
  }

  .steps .step[data-content]:after {
    content: attr(data-content);
  }

  .steps .step-neutral + .step-neutral:before,
  .steps .step-neutral:after,
  .steps .step-neutral > .step-icon {
    --step-bg: var(--color-neutral);
    --step-fg: var(--color-neutral-content);
  }

  .steps .step-primary + .step-primary:before,
  .steps .step-primary:after,
  .steps .step-primary > .step-icon {
    --step-bg: var(--color-primary);
    --step-fg: var(--color-primary-content);
  }

  .steps .step-secondary + .step-secondary:before,
  .steps .step-secondary:after,
  .steps .step-secondary > .step-icon {
    --step-bg: var(--color-secondary);
    --step-fg: var(--color-secondary-content);
  }

  .steps .step-accent + .step-accent:before,
  .steps .step-accent:after,
  .steps .step-accent > .step-icon {
    --step-bg: var(--color-accent);
    --step-fg: var(--color-accent-content);
  }

  .steps .step-info + .step-info:before,
  .steps .step-info:after,
  .steps .step-info > .step-icon {
    --step-bg: var(--color-info);
    --step-fg: var(--color-info-content);
  }

  .steps .step-success + .step-success:before,
  .steps .step-success:after,
  .steps .step-success > .step-icon {
    --step-bg: var(--color-success);
    --step-fg: var(--color-success-content);
  }

  .steps .step-warning + .step-warning:before,
  .steps .step-warning:after,
  .steps .step-warning > .step-icon {
    --step-bg: var(--color-warning);
    --step-fg: var(--color-warning-content);
  }

  .steps .step-error + .step-error:before,
  .steps .step-error:after,
  .steps .step-error > .step-icon {
    --step-bg: var(--color-error);
    --step-fg: var(--color-error-content);
  }

  .range {
    appearance: none;
    webkit-appearance: none;
    --range-thumb: var(--color-base-100);
    --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
    --range-progress: currentColor;
    --range-fill: 1;
    --range-p: 0.25rem;
    --range-bg: currentColor;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .range {
      --range-bg: color-mix(in oklab, currentColor 10%, #0000);
    }
  }

  .range {
    cursor: pointer;
    vertical-align: middle;
    --radius-selector-max: calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    );
    border-radius: calc(
      var(--radius-selector) + min(var(--range-p), var(--radius-selector-max))
    );
    width: clamp(3rem, 20rem, 100%);
    height: var(--range-thumb-size);
    background-color: #0000;
    border: none;
    overflow: hidden;
  }

  [dir="rtl"] .range {
    --range-dir: -1;
  }

  .range:focus {
    outline: none;
  }

  .range:focus-visible {
    outline-offset: 2px;
    outline: 2px solid;
  }

  .range::-webkit-slider-runnable-track {
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    width: 100%;
    height: calc(var(--range-thumb-size) * 0.5);
  }

  @media (forced-colors: active) {
    .range::-webkit-slider-runnable-track {
      border: 1px solid;
    }

    .range::-moz-range-track {
      border: 1px solid;
    }
  }

  .range::-webkit-slider-thumb {
    box-sizing: border-box;
    border-radius: calc(
      var(--radius-selector) + min(var(--range-p), var(--radius-selector-max))
    );
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    appearance: none;
    webkit-appearance: none;
    color: var(--range-progress);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset,
      calc(
          (var(--range-dir, 1) * -100rem) -
            (var(--range-dir, 1) * var(--range-thumb-size) / 2)
        )
        0 0 calc(100rem * var(--range-fill));
    background-color: currentColor;
    position: relative;
    top: 50%;
    transform: translateY(-50%);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .range::-webkit-slider-thumb {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset,
        0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset,
        0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000),
        0 0 0 2rem var(--range-thumb) inset,
        calc(
            (var(--range-dir, 1) * -100rem) -
              (var(--range-dir, 1) * var(--range-thumb-size) / 2)
          )
          0 0 calc(100rem * var(--range-fill));
    }
  }

  .range::-moz-range-track {
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    width: 100%;
    height: calc(var(--range-thumb-size) * 0.5);
  }

  .range::-moz-range-thumb {
    box-sizing: border-box;
    border-radius: calc(
      var(--radius-selector) + min(var(--range-p), var(--radius-selector-max))
    );
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    color: var(--range-progress);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset,
      calc(
          (var(--range-dir, 1) * -100rem) -
            (var(--range-dir, 1) * var(--range-thumb-size) / 2)
        )
        0 0 calc(100rem * var(--range-fill));
    background-color: currentColor;
    position: relative;
    top: 50%;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .range::-moz-range-thumb {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset,
        0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset,
        0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000),
        0 0 0 2rem var(--range-thumb) inset,
        calc(
            (var(--range-dir, 1) * -100rem) -
              (var(--range-dir, 1) * var(--range-thumb-size) / 2)
          )
          0 0 calc(100rem * var(--range-fill));
    }
  }

  .range:disabled {
    cursor: not-allowed;
    opacity: 0.3;
  }

  .select {
    border: var(--border) solid #0000;
    appearance: none;
    background-color: var(--color-base-100);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    touch-action: manipulation;
    text-overflow: ellipsis;
    box-shadow: 0 1px var(--input-color) inset,
      0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    background-image: linear-gradient(45deg, #0000 50%, currentColor 50%),
      linear-gradient(135deg, currentColor 50%, #0000 50%);
    background-position: calc(100% - 20px) calc(1px + 50%),
      calc(100% - 16.1px) calc(1px + 50%);
    background-repeat: no-repeat;
    background-size: 4px 4px, 4px 4px;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-shrink: 1;
    align-items: center;
    gap: 0.375rem;
    padding-inline: 1rem 1.75rem;
    font-size: 0.875rem;
    display: inline-flex;
    position: relative;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .select {
      box-shadow: 0 1px
          color-mix(
            in oklab,
            var(--input-color) calc(var(--depth) * 10%),
            #0000
          )
          inset,
        0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }

  .select {
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .select {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }

  .select {
    --size: calc(var(--size-field, 0.25rem) * 10);
  }

  [dir="rtl"] .select {
    background-position: 12px calc(1px + 50%), 16px calc(1px + 50%);
  }

  .select select {
    appearance: none;
    background: inherit;
    border-radius: inherit;
    border-style: none;
    width: calc(100% + 2.75rem);
    height: calc(100% - 2px);
    margin-inline: -1rem -1.75rem;
    padding-inline: 1rem 1.75rem;
  }

  .select select:focus,
  .select select:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .select select:focus,
    .select select:focus-within {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .select select:not(:last-child) {
    background-image: none;
    margin-inline-end: -1.375rem;
  }

  .select:focus,
  .select:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .select:focus,
    .select:focus-within {
      box-shadow: 0 1px
        color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }

  .select:focus,
  .select:focus-within {
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }

  .select:has(> select[disabled]),
  .select:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]),
    .select:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }

  :is(
      .select:has(> select[disabled]),
      .select:is(:disabled, [disabled])
    )::placeholder {
    color: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :is(
        .select:has(> select[disabled]),
        .select:is(:disabled, [disabled])
      )::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }

  .select:has(> select[disabled]) > select[disabled] {
    cursor: not-allowed;
  }

  .timeline {
    display: flex;
    position: relative;
  }

  .timeline > li {
    grid-template-rows: var(--timeline-row-start, minmax(0, 1fr)) auto var(
        --timeline-row-end,
        minmax(0, 1fr)
      );
    grid-template-columns: var(--timeline-col-start, minmax(0, 1fr)) auto var(
        --timeline-col-end,
        minmax(0, 1fr)
      );
    flex-shrink: 0;
    align-items: center;
    display: grid;
    position: relative;
  }

  .timeline > li > hr {
    border: none;
    width: 100%;
  }

  .timeline > li > hr:first-child {
    grid-row-start: 2;
    grid-column-start: 1;
  }

  .timeline > li > hr:last-child {
    grid-area: 2/3 / auto/none;
  }

  @media print {
    .timeline > li > hr {
      border: 0.1px solid var(--color-base-300);
    }
  }

  .timeline :where(hr) {
    background-color: var(--color-base-300);
    height: 0.25rem;
  }

  .timeline:has(.timeline-middle hr):first-child {
    border-start-start-radius: 0;
    border-start-end-radius: var(--radius-selector);
    border-end-end-radius: var(--radius-selector);
    border-end-start-radius: 0;
  }

  .timeline:has(.timeline-middle hr):last-child,
  .timeline:not(:has(.timeline-middle)) :first-child hr:last-child {
    border-start-start-radius: var(--radius-selector);
    border-start-end-radius: 0;
    border-end-end-radius: 0;
    border-end-start-radius: var(--radius-selector);
  }

  .timeline:not(:has(.timeline-middle)) :last-child hr:first-child {
    border-start-start-radius: 0;
    border-start-end-radius: var(--radius-selector);
    border-end-end-radius: var(--radius-selector);
    border-end-start-radius: 0;
  }

  .card {
    border-radius: var(--radius-box);
    outline-offset: 2px;
    outline: 0 solid #0000;
    flex-direction: column;
    transition: outline 0.2s ease-in-out;
    display: flex;
    position: relative;
  }

  .card:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .card:focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .card:focus-visible {
    outline-color: currentColor;
  }

  .card :where(figure:first-child) {
    border-start-start-radius: inherit;
    border-start-end-radius: inherit;
    border-end-end-radius: unset;
    border-end-start-radius: unset;
    overflow: hidden;
  }

  .card :where(figure:last-child) {
    border-start-start-radius: unset;
    border-start-end-radius: unset;
    border-end-end-radius: inherit;
    border-end-start-radius: inherit;
    overflow: hidden;
  }

  .card:where(.card-border) {
    border: var(--border) solid var(--color-base-200);
  }

  .card:where(.card-dash) {
    border: var(--border) dashed var(--color-base-200);
  }

  .card.image-full {
    display: grid;
  }

  .card.image-full > * {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .card.image-full > .card-body {
    color: var(--color-neutral-content);
    position: relative;
  }

  .card.image-full :where(figure) {
    border-radius: inherit;
    overflow: hidden;
  }

  .card.image-full > figure img {
    object-fit: cover;
    filter: brightness(28%);
    height: 100%;
  }

  .card figure {
    justify-content: center;
    align-items: center;
    display: flex;
  }

  .card:has(> input:is(input[type="checkbox"], input[type="radio"])) {
    cursor: pointer;
    -webkit-user-select: none;
    user-select: none;
  }

  .card:has(> :checked) {
    outline: 2px solid;
  }

  .avatar {
    vertical-align: middle;
    display: inline-flex;
    position: relative;
  }

  .avatar > div {
    aspect-ratio: 1;
    display: block;
    overflow: hidden;
  }

  .avatar img {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }

  .checkbox {
    border: var(--border) solid var(--input-color, var(--color-base-content));
  }

  @supports (color: color-mix(in lab, red, red)) {
    .checkbox {
      border: var(--border) solid
        var(
          --input-color,
          color-mix(in oklab, var(--color-base-content) 20%, #0000)
        );
    }
  }

  .checkbox {
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 0 #0000 inset, 0 0 #0000;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    flex-shrink: 0;
    padding: 0.25rem;
    transition: background-color 0.2s, box-shadow 0.2s;
    display: inline-block;
    position: relative;
  }

  .checkbox:before {
    --tw-content: "";
    content: var(--tw-content);
    opacity: 0;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    width: 100%;
    height: 100%;
    box-shadow: 0 3px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    background-color: currentColor;
    font-size: 1rem;
    line-height: 0.75;
    transition: clip-path 0.3s 0.1s, opacity 0.1s 0.1s, rotate 0.3s 0.1s,
      translate 0.3s 0.1s;
    display: block;
    rotate: 45deg;
  }

  .checkbox:focus-visible {
    outline: 2px solid var(--input-color, currentColor);
    outline-offset: 2px;
  }

  .checkbox:checked,
  .checkbox[aria-checked="true"] {
    background-color: var(--input-color, #0000);
    box-shadow: 0 0 #0000 inset,
      0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }

  :is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
    opacity: 1;
  }

  @media (forced-colors: active) {
    :is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
      --tw-content: "✔︎";
      clip-path: none;
      background-color: #0000;
      rotate: none;
    }
  }

  @media print {
    :is(.checkbox:checked, .checkbox[aria-checked="true"]):before {
      --tw-content: "✔︎";
      clip-path: none;
      background-color: #0000;
      rotate: none;
    }
  }

  .checkbox:indeterminate:before {
    opacity: 1;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
    translate: 0 -35%;
    rotate: none;
  }

  .checkbox:disabled {
    cursor: not-allowed;
    opacity: 0.2;
  }

  .drawer {
    grid-auto-columns: max-content auto;
    width: 100%;
    display: grid;
    position: relative;
  }

  .absolute {
    position: absolute;
  }

  .fixed {
    position: fixed;
  }

  .static {
    position: static;
  }

  .sticky {
    position: sticky;
  }

  .dropdown-end {
    --anchor-h: span-left;
  }

  .dropdown-end :where(.dropdown-content) {
    inset-inline-end: 0;
    translate: 0;
  }

  .dropdown-end.dropdown-left {
    --anchor-h: left;
    --anchor-v: span-top;
  }

  .dropdown-end.dropdown-left .dropdown-content {
    top: auto;
    bottom: 0;
  }

  .dropdown-end.dropdown-right {
    --anchor-h: right;
    --anchor-v: span-top;
  }

  .dropdown-end.dropdown-right .dropdown-content {
    top: auto;
    bottom: 0;
  }

  .\!-right-10 {
    right: calc(var(--spacing) * -10) !important;
  }

  .\!-bottom-6 {
    bottom: calc(var(--spacing) * -6) !important;
  }

  .\!-left-10 {
    left: calc(var(--spacing) * -10) !important;
  }

  .btn-active {
    --btn-bg: var(--btn-color, var(--color-base-200));
  }

  @supports (color: color-mix(in lab, red, red)) {
    .btn-active {
      --btn-bg: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-200)),
        #000 7%
      );
    }
  }

  .btn-active {
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
    isolation: isolate;
  }

  .z-\[1\] {
    z-index: 1;
  }

  .hero {
    background-position: 50%;
    background-size: cover;
    place-items: center;
    width: 100%;
    display: grid;
  }

  .hero > * {
    grid-row-start: 1;
    grid-column-start: 1;
  }

  .hero\! {
    background-position: 50% !important;
    background-size: cover !important;
    place-items: center !important;
    width: 100% !important;
    display: grid !important;
  }

  .hero\! > * {
    grid-row-start: 1 !important;
    grid-column-start: 1 !important;
  }

  .drawer-content {
    grid-row-start: 1;
    grid-column-start: 2;
    min-width: 0;
  }

  .container {
    width: 100%;
  }

  @media (min-width: 40rem) {
    .container {
      max-width: 40rem;
    }
  }

  @media (min-width: 48rem) {
    .container {
      max-width: 48rem;
    }
  }

  @media (min-width: 64rem) {
    .container {
      max-width: 64rem;
    }
  }

  @media (min-width: 80rem) {
    .container {
      max-width: 80rem;
    }
  }

  @media (min-width: 96rem) {
    .container {
      max-width: 96rem;
    }
  }

  .divider {
    white-space: nowrap;
    height: 1rem;
    margin: var(--divider-m, 1rem 0);
    --divider-color: var(--color-base-content);
    flex-direction: row;
    align-self: stretch;
    align-items: center;
    display: flex;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .divider {
      --divider-color: color-mix(
        in oklab,
        var(--color-base-content) 10%,
        transparent
      );
    }
  }

  .divider:before,
  .divider:after {
    content: "";
    background-color: var(--divider-color);
    flex-grow: 1;
    width: 100%;
    height: 0.125rem;
  }

  @media print {
    .divider:before,
    .divider:after {
      border: 0.5px solid;
    }
  }

  .divider:not(:empty) {
    gap: 1rem;
  }

  .filter {
    flex-wrap: wrap;
    display: flex;
  }

  .filter input[type="radio"] {
    width: auto;
  }

  .filter input {
    opacity: 1;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
    overflow: hidden;
    scale: 1;
  }

  .filter input:not(:last-child) {
    margin-inline-end: 0.25rem;
  }

  .filter input.filter-reset {
    aspect-ratio: 1;
  }

  .filter input.filter-reset:after {
    content: "×";
  }

  .filter:not(:has(input:checked:not(.filter-reset))) .filter-reset,
  .filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"],
  .filter:has(input:checked:not(.filter-reset))
    input:not(:checked, .filter-reset, input[type="reset"]) {
    opacity: 0;
    border-width: 0;
    width: 0;
    margin-inline: 0;
    padding-inline: 0;
    scale: 0;
  }

  .mx-3 {
    margin-inline: calc(var(--spacing) * 3);
  }

  .mx-auto {
    margin-inline: auto;
  }

  .my-5 {
    margin-block: calc(var(--spacing) * 5);
  }

  .label {
    white-space: nowrap;
    color: currentColor;
    align-items: center;
    gap: 0.375rem;
    display: inline-flex;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .label {
      color: color-mix(in oklab, currentColor 60%, transparent);
    }
  }

  .label:has(input) {
    cursor: pointer;
  }

  .label:is(.input > *, .select > *) {
    white-space: nowrap;
    height: calc(100% - 0.5rem);
    font-size: inherit;
    align-items: center;
    padding-inline: 0.75rem;
    display: flex;
  }

  .label:is(.input > *, .select > *):first-child {
    border-inline-end: var(--border) solid currentColor;
    margin-inline: -0.75rem 0.75rem;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .label:is(.input > *, .select > *):first-child {
      border-inline-end: var(--border) solid
        color-mix(in oklab, currentColor 10%, #0000);
    }
  }

  .label:is(.input > *, .select > *):last-child {
    border-inline-start: var(--border) solid currentColor;
    margin-inline: 0.75rem -0.75rem;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .label:is(.input > *, .select > *):last-child {
      border-inline-start: var(--border) solid
        color-mix(in oklab, currentColor 10%, #0000);
    }
  }

  .join-item:where(:not(:first-child, :disabled, [disabled], .btn-disabled)) {
    margin-block-start: 0;
    margin-inline-start: calc(var(--border, 1px) * -1);
  }

  .join-item:where(:is(:disabled, [disabled], .btn-disabled)) {
    border-width: var(--border, 1px) 0 var(--border, 1px) var(--border, 1px);
  }

  .prose {
    color: var(--tw-prose-body);
    max-width: 65ch;
  }

  .prose :where(p):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
  }

  .prose
    :where([class~="lead"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: var(--tw-prose-lead);
    margin-top: 1.2em;
    margin-bottom: 1.2em;
    font-size: 1.25em;
    line-height: 1.6;
  }

  .prose :where(a):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-links);
    font-weight: 500;
    text-decoration: underline;
  }

  .prose
    :where(strong):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-bold);
    font-weight: 600;
  }

  .prose
    :where(a strong):not(:where([class~="not-prose"], [class~="not-prose"] *)),
  .prose
    :where(blockquote strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ),
  .prose
    :where(thead th strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
  }

  .prose :where(ol):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-inline-start: 1.625em;
    list-style-type: decimal;
  }

  .prose
    :where(ol[type="A"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: upper-alpha;
  }

  .prose
    :where(ol[type="a"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: lower-alpha;
  }

  .prose
    :where(ol[type="A s"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: upper-alpha;
  }

  .prose
    :where(ol[type="a s"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: lower-alpha;
  }

  .prose
    :where(ol[type="I"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: upper-roman;
  }

  .prose
    :where(ol[type="i"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: lower-roman;
  }

  .prose
    :where(ol[type="I s"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: upper-roman;
  }

  .prose
    :where(ol[type="i s"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: lower-roman;
  }

  .prose
    :where(ol[type="1"]):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    list-style-type: decimal;
  }

  .prose :where(ul):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-inline-start: 1.625em;
    list-style-type: disc;
  }

  .prose
    :where(ol > li):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::marker {
    color: var(--tw-prose-counters);
    font-weight: 400;
  }

  .prose
    :where(ul > li):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    )::marker {
    color: var(--tw-prose-bullets);
  }

  .prose :where(dt):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    margin-top: 1.25em;
    font-weight: 600;
  }

  .prose :where(hr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    border-color: var(--tw-prose-hr);
    border-top-width: 1px;
    margin-top: 3em;
    margin-bottom: 3em;
  }

  .prose
    :where(blockquote):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: var(--tw-prose-quotes);
    border-inline-start-width: 0.25rem;
    border-inline-start-color: var(--tw-prose-quote-borders);
    quotes: "“" "”" "‘" "’";
    margin-top: 1.6em;
    margin-bottom: 1.6em;
    padding-inline-start: 1em;
    font-style: italic;
    font-weight: 500;
  }

  .prose
    :where(blockquote p:first-of-type):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ):before {
    content: open-quote;
  }

  .prose
    :where(blockquote p:last-of-type):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ):after {
    content: close-quote;
  }

  .prose :where(h1):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    margin-top: 0;
    margin-bottom: 0.888889em;
    font-size: 2.25em;
    font-weight: 800;
    line-height: 1.11111;
  }

  .prose
    :where(h1 strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
    font-weight: 900;
  }

  .prose :where(h2):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    margin-top: 2em;
    margin-bottom: 1em;
    font-size: 1.5em;
    font-weight: 700;
    line-height: 1.33333;
  }

  .prose
    :where(h2 strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
    font-weight: 800;
  }

  .prose :where(h3):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    margin-top: 1.6em;
    margin-bottom: 0.6em;
    font-size: 1.25em;
    font-weight: 600;
    line-height: 1.6;
  }

  .prose
    :where(h3 strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
    font-weight: 700;
  }

  .prose :where(h4):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    margin-top: 1.5em;
    margin-bottom: 0.5em;
    font-weight: 600;
    line-height: 1.5;
  }

  .prose
    :where(h4 strong):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
    font-weight: 700;
  }

  .prose :where(img):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
  }

  .prose
    :where(picture):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
    display: block;
  }

  .prose
    :where(video):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
  }

  .prose :where(kbd):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-kbd);
    box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%),
      0 3px rgb(var(--tw-prose-kbd-shadows) / 10%);
    padding-top: 0.1875em;
    padding-inline-end: 0.375em;
    padding-bottom: 0.1875em;
    border-radius: 0.3125rem;
    padding-inline-start: 0.375em;
    font-family: inherit;
    font-size: 0.875em;
    font-weight: 500;
  }

  .prose
    :where(code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-code);
    font-size: 0.875em;
    font-weight: 600;
  }

  .prose
    :where(code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ):before,
  .prose
    :where(code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ):after {
    content: "`";
  }

  .prose
    :where(a code):not(:where([class~="not-prose"], [class~="not-prose"] *)),
  .prose
    :where(h1 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
  }

  .prose
    :where(h2 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
    font-size: 0.875em;
  }

  .prose
    :where(h3 code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: inherit;
    font-size: 0.9em;
  }

  .prose
    :where(h4 code):not(:where([class~="not-prose"], [class~="not-prose"] *)),
  .prose
    :where(blockquote code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ),
  .prose
    :where(thead th code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: inherit;
  }

  .prose :where(pre):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-pre-code);
    background-color: var(--tw-prose-pre-bg);
    padding-top: 0.857143em;
    padding-inline-end: 1.14286em;
    padding-bottom: 0.857143em;
    border-radius: 0.375rem;
    margin-top: 1.71429em;
    margin-bottom: 1.71429em;
    padding-inline-start: 1.14286em;
    font-size: 0.875em;
    font-weight: 400;
    line-height: 1.71429;
    overflow-x: auto;
  }

  .prose
    :where(pre code):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    font-weight: inherit;
    color: inherit;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
    background-color: #0000;
    border-width: 0;
    border-radius: 0;
    padding: 0;
  }

  .prose
    :where(pre code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ):before,
  .prose
    :where(pre code):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ):after {
    content: none;
  }

  .prose
    :where(table):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    table-layout: auto;
    width: 100%;
    margin-top: 2em;
    margin-bottom: 2em;
    font-size: 0.875em;
    line-height: 1.71429;
  }

  .prose
    :where(thead):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    border-bottom-width: 1px;
    border-bottom-color: var(--tw-prose-th-borders);
  }

  .prose
    :where(thead th):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    color: var(--tw-prose-headings);
    vertical-align: bottom;
    padding-inline-end: 0.571429em;
    padding-bottom: 0.571429em;
    padding-inline-start: 0.571429em;
    font-weight: 600;
  }

  .prose
    :where(tbody tr):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    border-bottom-width: 1px;
    border-bottom-color: var(--tw-prose-td-borders);
  }

  .prose
    :where(tbody tr:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    border-bottom-width: 0;
  }

  .prose
    :where(tbody td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    vertical-align: baseline;
  }

  .prose
    :where(tfoot):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    border-top-width: 1px;
    border-top-color: var(--tw-prose-th-borders);
  }

  .prose
    :where(tfoot td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    vertical-align: top;
  }

  .prose
    :where(th, td):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    text-align: start;
  }

  .prose
    :where(figure > *):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0;
    margin-bottom: 0;
  }

  .prose
    :where(figcaption):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    color: var(--tw-prose-captions);
    margin-top: 0.857143em;
    font-size: 0.875em;
    line-height: 1.42857;
  }

  .prose {
    --tw-prose-body: oklch(37.3% 0.034 259.733);
    --tw-prose-headings: oklch(21% 0.034 264.665);
    --tw-prose-lead: oklch(44.6% 0.03 256.802);
    --tw-prose-links: oklch(21% 0.034 264.665);
    --tw-prose-bold: oklch(21% 0.034 264.665);
    --tw-prose-counters: oklch(55.1% 0.027 264.364);
    --tw-prose-bullets: oklch(87.2% 0.01 258.338);
    --tw-prose-hr: oklch(92.8% 0.006 264.531);
    --tw-prose-quotes: oklch(21% 0.034 264.665);
    --tw-prose-quote-borders: oklch(92.8% 0.006 264.531);
    --tw-prose-captions: oklch(55.1% 0.027 264.364);
    --tw-prose-kbd: oklch(21% 0.034 264.665);
    --tw-prose-kbd-shadows: NaN NaN NaN;
    --tw-prose-code: oklch(21% 0.034 264.665);
    --tw-prose-pre-code: oklch(92.8% 0.006 264.531);
    --tw-prose-pre-bg: oklch(27.8% 0.033 256.848);
    --tw-prose-th-borders: oklch(87.2% 0.01 258.338);
    --tw-prose-td-borders: oklch(92.8% 0.006 264.531);
    --tw-prose-invert-body: oklch(87.2% 0.01 258.338);
    --tw-prose-invert-headings: #fff;
    --tw-prose-invert-lead: oklch(70.7% 0.022 261.325);
    --tw-prose-invert-links: #fff;
    --tw-prose-invert-bold: #fff;
    --tw-prose-invert-counters: oklch(70.7% 0.022 261.325);
    --tw-prose-invert-bullets: oklch(44.6% 0.03 256.802);
    --tw-prose-invert-hr: oklch(37.3% 0.034 259.733);
    --tw-prose-invert-quotes: oklch(96.7% 0.003 264.542);
    --tw-prose-invert-quote-borders: oklch(37.3% 0.034 259.733);
    --tw-prose-invert-captions: oklch(70.7% 0.022 261.325);
    --tw-prose-invert-kbd: #fff;
    --tw-prose-invert-kbd-shadows: 255 255 255;
    --tw-prose-invert-code: #fff;
    --tw-prose-invert-pre-code: oklch(87.2% 0.01 258.338);
    --tw-prose-invert-pre-bg: #00000080;
    --tw-prose-invert-th-borders: oklch(44.6% 0.03 256.802);
    --tw-prose-invert-td-borders: oklch(37.3% 0.034 259.733);
    font-size: 1rem;
    line-height: 1.75;
  }

  .prose
    :where(picture > img):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0;
    margin-bottom: 0;
  }

  .prose :where(li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0.5em;
    margin-bottom: 0.5em;
  }

  .prose
    :where(ol > li):not(:where([class~="not-prose"], [class~="not-prose"] *)),
  .prose
    :where(ul > li):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    padding-inline-start: 0.375em;
  }

  .prose
    :where(.prose > ul > li p):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0.75em;
    margin-bottom: 0.75em;
  }

  .prose
    :where(.prose > ul > li > p:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 1.25em;
  }

  .prose
    :where(.prose > ul > li > p:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-bottom: 1.25em;
  }

  .prose
    :where(.prose > ol > li > p:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 1.25em;
  }

  .prose
    :where(.prose > ol > li > p:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-bottom: 1.25em;
  }

  .prose
    :where(ul ul, ul ol, ol ul, ol ol):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0.75em;
    margin-bottom: 0.75em;
  }

  .prose :where(dl):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
  }

  .prose :where(dd):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0.5em;
    padding-inline-start: 1.625em;
  }

  .prose
    :where(hr + *):not(:where([class~="not-prose"], [class~="not-prose"] *)),
  .prose
    :where(h2 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)),
  .prose
    :where(h3 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)),
  .prose
    :where(h4 + *):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 0;
  }

  .prose
    :where(thead th:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-inline-start: 0;
  }

  .prose
    :where(thead th:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-inline-end: 0;
  }

  .prose
    :where(tbody td, tfoot td):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-top: 0.571429em;
    padding-inline-end: 0.571429em;
    padding-bottom: 0.571429em;
    padding-inline-start: 0.571429em;
  }

  .prose
    :where(tbody td:first-child, tfoot td:first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-inline-start: 0;
  }

  .prose
    :where(tbody td:last-child, tfoot td:last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    padding-inline-end: 0;
  }

  .prose
    :where(figure):not(:where([class~="not-prose"], [class~="not-prose"] *)) {
    margin-top: 2em;
    margin-bottom: 2em;
  }

  .prose
    :where(.prose > :first-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-top: 0;
  }

  .prose
    :where(.prose > :last-child):not(
      :where([class~="not-prose"], [class~="not-prose"] *)
    ) {
    margin-bottom: 0;
  }

  .-mt-1 {
    margin-top: calc(var(--spacing) * -1);
  }

  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }

  .mt-8 {
    margin-top: calc(var(--spacing) * 8);
  }

  .mt-12 {
    margin-top: calc(var(--spacing) * 12);
  }

  .breadcrumbs {
    max-width: 100%;
    padding-block: 0.5rem;
    overflow-x: auto;
  }

  .breadcrumbs > menu,
  .breadcrumbs > ul,
  .breadcrumbs > ol {
    white-space: nowrap;
    align-items: center;
    min-height: min-content;
    display: flex;
  }

  :is(.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol) > li {
    align-items: center;
    display: flex;
  }

  :is(.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol) > li > * {
    cursor: pointer;
    align-items: center;
    gap: 0.5rem;
    display: flex;
  }

  @media (hover: hover) {
    :is(.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol)
      > li
      > :hover {
      text-decoration-line: underline;
    }
  }

  :is(.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol) > li > :focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    :is(.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol)
      > li
      > :focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  :is(.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol)
    > li
    > :focus-visible {
    outline-offset: 2px;
    outline: 2px solid;
  }

  :is(.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol)
    > li
    + :before {
    content: "";
    opacity: 0.4;
    background-color: #0000;
    border-top: 1px solid;
    border-right: 1px solid;
    width: 0.375rem;
    height: 0.375rem;
    margin-left: 0.5rem;
    margin-right: 0.75rem;
    display: block;
    rotate: 45deg;
  }

  [dir="rtl"]
    :is(:is(.breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol) > li)
    + :before {
    rotate: -135deg;
  }

  .-mb-20 {
    margin-bottom: calc(var(--spacing) * -20);
  }

  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }

  .mb-5 {
    margin-bottom: calc(var(--spacing) * 5);
  }

  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }

  .mb-8 {
    margin-bottom: calc(var(--spacing) * 8);
  }

  .status {
    aspect-ratio: 1;
    border-radius: var(--radius-selector);
    background-color: var(--color-base-content);
    width: 0.5rem;
    height: 0.5rem;
    display: inline-block;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .status {
      background-color: color-mix(
        in oklab,
        var(--color-base-content) 20%,
        transparent
      );
    }
  }

  .status {
    vertical-align: middle;
    color: #0000004d;
    background-position: 50%;
    background-repeat: no-repeat;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .status {
      color: #0000004d;
    }

    @supports (color: color-mix(in lab, red, red)) {
      .status {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
    }
  }

  .status {
    background-image: radial-gradient(
      circle at 35% 30%,
      oklch(1 0 0 / calc(var(--depth) * 0.5)),
      #0000
    );
    box-shadow: 0 2px 3px -1px;
  }

  @supports (color: color-mix(in lab, red, red)) {
    .status {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor
            calc(var(--depth) * 100%), #0000);
    }
  }

  .badge {
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--badge-fg);
    border: var(--border) solid var(--badge-color, var(--color-base-200));
    width: fit-content;
    padding-inline: calc(0.25rem * 3 - var(--border));
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--badge-bg);
    --badge-bg: var(--badge-color, var(--color-base-100));
    --badge-fg: var(--color-base-content);
    --size: calc(var(--size-selector, 0.25rem) * 6);
    height: var(--size);
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    display: inline-flex;
  }

  .navbar {
    align-items: center;
    width: 100%;
    min-height: 4rem;
    padding: 0.5rem;
    display: flex;
  }

  .footer {
    grid-auto-flow: row;
    place-items: start;
    gap: 2.5rem 1rem;
    width: 100%;
    font-size: 0.875rem;
    line-height: 1.25rem;
    display: grid;
  }

  .footer > * {
    place-items: start;
    gap: 0.5rem;
    display: grid;
  }

  .footer.footer-center {
    text-align: center;
    grid-auto-flow: column dense;
    place-items: center;
  }

  .footer.footer-center > * {
    place-items: center;
  }

  .card-body {
    padding: var(--card-p, 1.5rem);
    font-size: var(--card-fs, 0.875rem);
    flex-direction: column;
    flex: auto;
    gap: 0.5rem;
    display: flex;
  }

  .card-body :where(p) {
    flex-grow: 1;
  }

  .carousel {
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    scrollbar-width: none;
    display: inline-flex;
    overflow-x: scroll;
  }

  .carousel::-webkit-scrollbar {
    display: none;
  }

  .card-title {
    font-size: var(--cardtitle-fs, 1.125rem);
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    display: flex;
  }

  .join {
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
    align-items: stretch;
    display: inline-flex;
  }

  .join :where(.join-item) {
    border-start-start-radius: var(--join-ss, 0);
    border-start-end-radius: var(--join-se, 0);
    border-end-end-radius: var(--join-ee, 0);
    border-end-start-radius: var(--join-es, 0);
  }

  .join :where(.join-item) * {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }

  .join > .join-item:where(:first-child),
  .join :first-child:not(:last-child) :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }

  .join > .join-item:where(:last-child),
  .join :last-child:not(:first-child) :where(.join-item) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }

  .join > .join-item:where(:only-child),
  .join :only-child :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }

  :root .prose {
    --tw-prose-body: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-body: color-mix(
        in oklab,
        var(--color-base-content) 80%,
        #0000
      );
    }
  }

  :root .prose {
    --tw-prose-headings: var(--color-base-content);
    --tw-prose-lead: var(--color-base-content);
    --tw-prose-links: var(--color-base-content);
    --tw-prose-bold: var(--color-base-content);
    --tw-prose-counters: var(--color-base-content);
    --tw-prose-bullets: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-bullets: color-mix(
        in oklab,
        var(--color-base-content) 50%,
        #0000
      );
    }
  }

  :root .prose {
    --tw-prose-hr: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }

  :root .prose {
    --tw-prose-quotes: var(--color-base-content);
    --tw-prose-quote-borders: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-quote-borders: color-mix(
        in oklab,
        var(--color-base-content) 20%,
        #0000
      );
    }
  }

  :root .prose {
    --tw-prose-captions: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-captions: color-mix(
        in oklab,
        var(--color-base-content) 50%,
        #0000
      );
    }
  }

  :root .prose {
    --tw-prose-code: var(--color-base-content);
    --tw-prose-pre-code: var(--color-neutral-content);
    --tw-prose-pre-bg: var(--color-neutral);
    --tw-prose-th-borders: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-th-borders: color-mix(
        in oklab,
        var(--color-base-content) 50%,
        #0000
      );
    }
  }

  :root .prose {
    --tw-prose-td-borders: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-td-borders: color-mix(
        in oklab,
        var(--color-base-content) 20%,
        #0000
      );
    }
  }

  :root .prose {
    --tw-prose-kbd: var(--color-base-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
  }

  :root .prose :where(code):not(pre > code) {
    background-color: var(--color-base-200);
    border-radius: var(--radius-selector);
    border: var(--border) solid var(--color-base-300);
    font-weight: inherit;
    padding-inline: 0.5em;
  }

  :root .prose :where(code):not(pre > code):before,
  :root .prose :where(code):not(pre > code):after {
    display: none;
  }

  .block {
    display: block;
  }

  .contents {
    display: contents;
  }

  .flex {
    display: flex;
  }

  .grid {
    display: grid;
  }

  .hidden {
    display: none;
  }

  .inline-block {
    display: inline-block;
  }

  .table {
    display: table;
  }

  .aspect-square {
    aspect-ratio: 1;
  }

  .btn-square {
    width: var(--size);
    height: var(--size);
    padding-inline: 0;
  }

  .h-2 {
    height: calc(var(--spacing) * 2);
  }

  .h-6 {
    height: calc(var(--spacing) * 6);
  }

  .h-12 {
    height: calc(var(--spacing) * 12);
  }

  .h-24 {
    height: calc(var(--spacing) * 24);
  }

  .h-40 {
    height: calc(var(--spacing) * 40);
  }

  .min-h-full {
    min-height: 100%;
  }

  .min-h-screen {
    min-height: 100vh;
  }

  .w-2 {
    width: calc(var(--spacing) * 2);
  }

  .w-3xs {
    width: var(--container-3xs);
  }

  .w-6 {
    width: calc(var(--spacing) * 6);
  }

  .w-12 {
    width: calc(var(--spacing) * 12);
  }

  .w-24 {
    width: calc(var(--spacing) * 24);
  }

  .w-40 {
    width: calc(var(--spacing) * 40);
  }

  .w-52 {
    width: calc(var(--spacing) * 52);
  }

  .w-80 {
    width: calc(var(--spacing) * 80);
  }

  .w-full {
    width: 100%;
  }

  .max-w-3xl {
    max-width: var(--container-3xl);
  }

  .max-w-4xl {
    max-width: var(--container-4xl);
  }

  .max-w-none {
    max-width: none;
  }

  .min-w-full {
    min-width: 100%;
  }

  .flex-1 {
    flex: 1;
  }

  .flex-none {
    flex: none;
  }

  .flex-shrink-0 {
    flex-shrink: 0;
  }

  .shrink {
    flex-shrink: 1;
  }

  .flex-grow,
  .grow {
    flex-grow: 1;
  }

  .transform {
    transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z)
      var(--tw-skew-x) var(--tw-skew-y);
  }

  .link {
    cursor: pointer;
    text-decoration-line: underline;
  }

  .link:focus {
    --tw-outline-style: none;
    outline-style: none;
  }

  @media (forced-colors: active) {
    .link:focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }

  .link:focus-visible {
    outline-offset: 2px;
    outline: 2px solid;
  }

  .footer-horizontal {
    grid-auto-flow: column;
  }

  .footer-horizontal.footer-center {
    grid-auto-flow: dense;
  }

  .grid-flow-col {
    grid-auto-flow: column;
  }

  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }

  .flex-col {
    flex-direction: column;
  }

  .flex-row {
    flex-direction: row;
  }

  .flex-wrap {
    flex-wrap: wrap;
  }

  .items-center {
    align-items: center;
  }

  .items-start {
    align-items: flex-start;
  }

  .justify-between {
    justify-content: space-between;
  }

  .justify-center {
    justify-content: center;
  }

  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }

  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }

  .gap-5 {
    gap: calc(var(--spacing) * 5);
  }

  .gap-6 {
    gap: calc(var(--spacing) * 6);
  }

  :where(.space-y-1 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(
      calc(var(--spacing) * 1) * var(--tw-space-y-reverse)
    );
    margin-block-end: calc(
      calc(var(--spacing) * 1) * calc(1 - var(--tw-space-y-reverse))
    );
  }

  :where(.space-y-2 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(
      calc(var(--spacing) * 2) * var(--tw-space-y-reverse)
    );
    margin-block-end: calc(
      calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse))
    );
  }

  :where(.space-y-4 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(
      calc(var(--spacing) * 4) * var(--tw-space-y-reverse)
    );
    margin-block-end: calc(
      calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse))
    );
  }

  :where(.space-y-8 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(
      calc(var(--spacing) * 8) * var(--tw-space-y-reverse)
    );
    margin-block-end: calc(
      calc(var(--spacing) * 8) * calc(1 - var(--tw-space-y-reverse))
    );
  }

  .self-center {
    align-self: center;
  }

  .rounded-box {
    border-radius: var(--radius-box);
  }

  .rounded-full {
    border-radius: 3.40282e38px;
  }

  .rounded-lg {
    border-radius: var(--radius-lg);
  }

  .rounded-md {
    border-radius: var(--radius-md);
  }

  .rounded-xl {
    border-radius: var(--radius-xl);
  }

  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }

  .border-t-2 {
    border-top-style: var(--tw-border-style);
    border-top-width: 2px;
  }

  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }

  .border-l-4 {
    border-left-style: var(--tw-border-style);
    border-left-width: 4px;
  }

  .badge-soft {
    color: var(--badge-color, var(--color-base-content));
    background-color: var(--badge-color, var(--color-base-content));
  }

  @supports (color: color-mix(in lab, red, red)) {
    .badge-soft {
      background-color: color-mix(
        in oklab,
        var(--badge-color, var(--color-base-content)) 8%,
        var(--color-base-100)
      );
    }
  }

  .badge-soft {
    border-color: var(--badge-color, var(--color-base-content));
  }

  @supports (color: color-mix(in lab, red, red)) {
    .badge-soft {
      border-color: color-mix(
        in oklab,
        var(--badge-color, var(--color-base-content)) 10%,
        var(--color-base-100)
      );
    }
  }

  .badge-soft {
    background-image: none;
  }

  .border-base-200 {
    border-color: var(--color-base-200);
  }

  .border-base-300 {
    border-color: var(--color-base-300);
  }

  .border-primary {
    border-color: var(--color-primary);
  }

  .glass {
    -webkit-backdrop-filter: blur(var(--glass-blur, 40px));
    backdrop-filter: blur(var(--glass-blur, 40px));
    background-color: #0000;
    background-image: linear-gradient(
        135deg,
        oklch(100% 0 0 / var(--glass-opacity, 30%)),
        #0000
      ),
      linear-gradient(
        var(--glass-reflect-degree, 100deg),
        oklch(100% 0 0 / var(--glass-reflect-opacity, 5%)) 25%,
        oklch(0% 0 0/0) 25%
      );
    box-shadow: 0 0 0 1px oklch(100% 0 0 / var(--glass-border-opacity, 20%))
        inset,
      0 0 0 2px #0000000d;
    text-shadow: 0 1px oklch(0% 0 0 / var(--glass-text-shadow-opacity, 5%));
    border: none;
  }

  .\!bg-neutral-content {
    background-color: var(--color-neutral-content) !important;
  }

  .bg-base-100 {
    background-color: var(--color-base-100);
  }

  .bg-base-200,
  .bg-base-200\/50 {
    background-color: var(--color-base-200);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .bg-base-200\/50 {
      background-color: color-mix(
        in oklab,
        var(--color-base-200) 50%,
        transparent
      );
    }
  }

  .bg-base-300 {
    background-color: var(--color-base-300);
  }

  .bg-primary,
  .bg-primary\/10 {
    background-color: var(--color-primary);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .bg-primary\/10 {
      background-color: color-mix(
        in oklab,
        var(--color-primary) 10%,
        transparent
      );
    }
  }

  .fill-current {
    fill: currentColor;
  }

  .stroke-current {
    stroke: currentColor;
  }

  .object-cover {
    object-fit: cover;
  }

  .p-2 {
    padding: calc(var(--spacing) * 2);
  }

  .p-3 {
    padding: calc(var(--spacing) * 3);
  }

  .p-4 {
    padding: calc(var(--spacing) * 4);
  }

  .p-6 {
    padding: calc(var(--spacing) * 6);
  }

  .p-8 {
    padding: calc(var(--spacing) * 8);
  }

  .p-10 {
    padding: calc(var(--spacing) * 10);
  }

  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }

  .py-8 {
    padding-block: calc(var(--spacing) * 8);
  }

  .py-12 {
    padding-block: calc(var(--spacing) * 12);
  }

  .pt-4 {
    padding-top: calc(var(--spacing) * 4);
  }

  .pt-20 {
    padding-top: calc(var(--spacing) * 20);
  }

  .pb-12 {
    padding-bottom: calc(var(--spacing) * 12);
  }

  .pl-0 {
    padding-left: calc(var(--spacing) * 0);
  }

  .pl-4 {
    padding-left: calc(var(--spacing) * 4);
  }

  .text-center {
    text-align: center;
  }

  .text-left {
    text-align: left;
  }

  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }

  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }

  .text-5xl {
    font-size: var(--text-5xl);
    line-height: var(--tw-leading, var(--text-5xl--line-height));
  }

  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }

  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }

  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }

  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }

  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }

  .leading-16 {
    --tw-leading: calc(var(--spacing) * 16);
    line-height: calc(var(--spacing) * 16);
  }

  .leading-tight {
    --tw-leading: var(--leading-tight);
    line-height: var(--leading-tight);
  }

  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }

  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }

  .text-base-content {
    color: var(--color-base-content);
  }

  .text-black {
    color: var(--color-black);
  }

  .text-gray-600 {
    color: var(--color-gray-600);
  }

  .text-neutral-content\/30 {
    color: var(--color-neutral-content);
  }

  @supports (color: color-mix(in lab, red, red)) {
    .text-neutral-content\/30 {
      color: color-mix(in oklab, var(--color-neutral-content) 30%, transparent);
    }
  }

  .text-primary {
    color: var(--color-primary);
  }

  .text-primary-content {
    color: var(--color-primary-content);
  }

  .text-secondary {
    color: var(--color-secondary);
  }

  .italic {
    font-style: italic;
  }

  .link-hover {
    text-decoration-line: none;
  }

  @media (hover: hover) {
    .link-hover:hover {
      text-decoration-line: underline;
    }
  }

  .no-underline {
    text-decoration-line: none;
  }

  .opacity-60 {
    opacity: 0.6;
  }

  .opacity-80 {
    opacity: 0.8;
  }

  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, #0000001a),
      0 1px 2px -1px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
      var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, #0000001a),
      0 4px 6px -4px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
      var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .shadow-sm {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, #0000001a),
      0 1px 2px -1px var(--tw-shadow-color, #0000001a);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
      var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .ring {
    --tw-ring-shadow: var(--tw-ring-inset) 0 0 0
      calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
      var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }

  .btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible) {
    --btn-shadow: "";
    --btn-bg: #0000;
    --btn-border: #0000;
    --btn-noise: none;
  }

  .btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible):not(
      :disabled,
      [disabled],
      .btn-disabled
    ) {
    --btn-fg: currentColor;
    outline-color: currentColor;
  }

  @media (hover: none) {
    .btn-ghost:hover:not(
        .btn-active,
        :active,
        :focus-visible,
        :disabled,
        [disabled],
        .btn-disabled
      ) {
      --btn-shadow: "";
      --btn-bg: #0000;
      --btn-border: #0000;
      --btn-noise: none;
      --btn-fg: currentColor;
    }
  }

  .filter {
    filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast)
      var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert)
      var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
  }

  .backdrop-filter {
    -webkit-backdrop-filter: var(--tw-backdrop-blur)
      var(--tw-backdrop-brightness) var(--tw-backdrop-contrast)
      var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate)
      var(--tw-backdrop-invert) var(--tw-backdrop-opacity)
      var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
    backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness)
      var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale)
      var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert)
      var(--tw-backdrop-opacity) var(--tw-backdrop-saturate)
      var(--tw-backdrop-sepia);
  }

  .transition {
    transition-property: color, background-color, border-color, outline-color,
      text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via,
      --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate,
      filter, -webkit-backdrop-filter, backdrop-filter, display, visibility,
      content-visibility, overlay, pointer-events;
    transition-timing-function: var(
      --tw-ease,
      var(--default-transition-timing-function)
    );
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .transition-all {
    transition-property: all;
    transition-timing-function: var(
      --tw-ease,
      var(--default-transition-timing-function)
    );
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }

  .duration-300 {
    --tw-duration: 0.3s;
    transition-duration: 0.3s;
  }

  .prose blockquote p:first-of-type:before,
  .prose blockquote p:last-of-type:after {
    content: none;
  }

  .\!prose-gray {
    --tw-prose-body: oklch(37.3% 0.034 259.733) !important;
    --tw-prose-headings: oklch(21% 0.034 264.665) !important;
    --tw-prose-lead: oklch(44.6% 0.03 256.802) !important;
    --tw-prose-links: oklch(21% 0.034 264.665) !important;
    --tw-prose-bold: oklch(21% 0.034 264.665) !important;
    --tw-prose-counters: oklch(55.1% 0.027 264.364) !important;
    --tw-prose-bullets: oklch(87.2% 0.01 258.338) !important;
    --tw-prose-hr: oklch(92.8% 0.006 264.531) !important;
    --tw-prose-quotes: oklch(21% 0.034 264.665) !important;
    --tw-prose-quote-borders: oklch(92.8% 0.006 264.531) !important;
    --tw-prose-captions: oklch(55.1% 0.027 264.364) !important;
    --tw-prose-kbd: oklch(21% 0.034 264.665) !important;
    --tw-prose-kbd-shadows: NaN NaN NaN !important;
    --tw-prose-code: oklch(21% 0.034 264.665) !important;
    --tw-prose-pre-code: oklch(92.8% 0.006 264.531) !important;
    --tw-prose-pre-bg: oklch(27.8% 0.033 256.848) !important;
    --tw-prose-th-borders: oklch(87.2% 0.01 258.338) !important;
    --tw-prose-td-borders: oklch(92.8% 0.006 264.531) !important;
    --tw-prose-invert-body: oklch(87.2% 0.01 258.338) !important;
    --tw-prose-invert-headings: #fff !important;
    --tw-prose-invert-lead: oklch(70.7% 0.022 261.325) !important;
    --tw-prose-invert-links: #fff !important;
    --tw-prose-invert-bold: #fff !important;
    --tw-prose-invert-counters: oklch(70.7% 0.022 261.325) !important;
    --tw-prose-invert-bullets: oklch(44.6% 0.03 256.802) !important;
    --tw-prose-invert-hr: oklch(37.3% 0.034 259.733) !important;
    --tw-prose-invert-quotes: oklch(96.7% 0.003 264.542) !important;
    --tw-prose-invert-quote-borders: oklch(37.3% 0.034 259.733) !important;
    --tw-prose-invert-captions: oklch(70.7% 0.022 261.325) !important;
    --tw-prose-invert-kbd: #fff !important;
    --tw-prose-invert-kbd-shadows: 255 255 255 !important;
    --tw-prose-invert-code: #fff !important;
    --tw-prose-invert-pre-code: oklch(87.2% 0.01 258.338) !important;
    --tw-prose-invert-pre-bg: #00000080 !important;
    --tw-prose-invert-th-borders: oklch(44.6% 0.03 256.802) !important;
    --tw-prose-invert-td-borders: oklch(37.3% 0.034 259.733) !important;
  }

  .\!prose-slate {
    --tw-prose-body: oklch(37.2% 0.044 257.287) !important;
    --tw-prose-headings: oklch(20.8% 0.042 265.755) !important;
    --tw-prose-lead: oklch(44.6% 0.043 257.281) !important;
    --tw-prose-links: oklch(20.8% 0.042 265.755) !important;
    --tw-prose-bold: oklch(20.8% 0.042 265.755) !important;
    --tw-prose-counters: oklch(55.4% 0.046 257.417) !important;
    --tw-prose-bullets: oklch(86.9% 0.022 252.894) !important;
    --tw-prose-hr: oklch(92.9% 0.013 255.508) !important;
    --tw-prose-quotes: oklch(20.8% 0.042 265.755) !important;
    --tw-prose-quote-borders: oklch(92.9% 0.013 255.508) !important;
    --tw-prose-captions: oklch(55.4% 0.046 257.417) !important;
    --tw-prose-kbd: oklch(20.8% 0.042 265.755) !important;
    --tw-prose-kbd-shadows: NaN NaN NaN !important;
    --tw-prose-code: oklch(20.8% 0.042 265.755) !important;
    --tw-prose-pre-code: oklch(92.9% 0.013 255.508) !important;
    --tw-prose-pre-bg: oklch(27.9% 0.041 260.031) !important;
    --tw-prose-th-borders: oklch(86.9% 0.022 252.894) !important;
    --tw-prose-td-borders: oklch(92.9% 0.013 255.508) !important;
    --tw-prose-invert-body: oklch(86.9% 0.022 252.894) !important;
    --tw-prose-invert-headings: #fff !important;
    --tw-prose-invert-lead: oklch(70.4% 0.04 256.788) !important;
    --tw-prose-invert-links: #fff !important;
    --tw-prose-invert-bold: #fff !important;
    --tw-prose-invert-counters: oklch(70.4% 0.04 256.788) !important;
    --tw-prose-invert-bullets: oklch(44.6% 0.043 257.281) !important;
    --tw-prose-invert-hr: oklch(37.2% 0.044 257.287) !important;
    --tw-prose-invert-quotes: oklch(96.8% 0.007 247.896) !important;
    --tw-prose-invert-quote-borders: oklch(37.2% 0.044 257.287) !important;
    --tw-prose-invert-captions: oklch(70.4% 0.04 256.788) !important;
    --tw-prose-invert-kbd: #fff !important;
    --tw-prose-invert-kbd-shadows: 255 255 255 !important;
    --tw-prose-invert-code: #fff !important;
    --tw-prose-invert-pre-code: oklch(86.9% 0.022 252.894) !important;
    --tw-prose-invert-pre-bg: #00000080 !important;
    --tw-prose-invert-th-borders: oklch(44.6% 0.043 257.281) !important;
    --tw-prose-invert-td-borders: oklch(37.2% 0.044 257.287) !important;
  }

  .prose-gray {
    --tw-prose-body: oklch(37.3% 0.034 259.733);
    --tw-prose-headings: oklch(21% 0.034 264.665);
    --tw-prose-lead: oklch(44.6% 0.03 256.802);
    --tw-prose-links: oklch(21% 0.034 264.665);
    --tw-prose-bold: oklch(21% 0.034 264.665);
    --tw-prose-counters: oklch(55.1% 0.027 264.364);
    --tw-prose-bullets: oklch(87.2% 0.01 258.338);
    --tw-prose-hr: oklch(92.8% 0.006 264.531);
    --tw-prose-quotes: oklch(21% 0.034 264.665);
    --tw-prose-quote-borders: oklch(92.8% 0.006 264.531);
    --tw-prose-captions: oklch(55.1% 0.027 264.364);
    --tw-prose-kbd: oklch(21% 0.034 264.665);
    --tw-prose-kbd-shadows: NaN NaN NaN;
    --tw-prose-code: oklch(21% 0.034 264.665);
    --tw-prose-pre-code: oklch(92.8% 0.006 264.531);
    --tw-prose-pre-bg: oklch(27.8% 0.033 256.848);
    --tw-prose-th-borders: oklch(87.2% 0.01 258.338);
    --tw-prose-td-borders: oklch(92.8% 0.006 264.531);
    --tw-prose-invert-body: oklch(87.2% 0.01 258.338);
    --tw-prose-invert-headings: #fff;
    --tw-prose-invert-lead: oklch(70.7% 0.022 261.325);
    --tw-prose-invert-links: #fff;
    --tw-prose-invert-bold: #fff;
    --tw-prose-invert-counters: oklch(70.7% 0.022 261.325);
    --tw-prose-invert-bullets: oklch(44.6% 0.03 256.802);
    --tw-prose-invert-hr: oklch(37.3% 0.034 259.733);
    --tw-prose-invert-quotes: oklch(96.7% 0.003 264.542);
    --tw-prose-invert-quote-borders: oklch(37.3% 0.034 259.733);
    --tw-prose-invert-captions: oklch(70.7% 0.022 261.325);
    --tw-prose-invert-kbd: #fff;
    --tw-prose-invert-kbd-shadows: 255 255 255;
    --tw-prose-invert-code: #fff;
    --tw-prose-invert-pre-code: oklch(87.2% 0.01 258.338);
    --tw-prose-invert-pre-bg: #00000080;
    --tw-prose-invert-th-borders: oklch(44.6% 0.03 256.802);
    --tw-prose-invert-td-borders: oklch(37.3% 0.034 259.733);
  }

  .btn-sm {
    --fontsize: 0.75rem;
    --btn-p: 0.75rem;
    --size: calc(var(--size-field, 0.25rem) * 8);
  }

  .btn-xs {
    --fontsize: 0.6875rem;
    --btn-p: 0.5rem;
    --size: calc(var(--size-field, 0.25rem) * 6);
  }

  .card-md .card-body {
    --card-p: 1.5rem;
    --card-fs: 0.875rem;
  }

  .card-md .card-title {
    --cardtitle-fs: 1.125rem;
  }

  .badge-primary {
    --badge-color: var(--color-primary);
    --badge-fg: var(--color-primary-content);
  }

  .badge-secondary {
    --badge-color: var(--color-secondary);
    --badge-fg: var(--color-secondary-content);
  }

  .btn-neutral {
    --btn-color: var(--color-neutral);
    --btn-fg: var(--color-neutral-content);
  }

  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }

  @media (hover: hover) {
    .hover\:scale-105:hover {
      --tw-scale-x: 105%;
      --tw-scale-y: 105%;
      --tw-scale-z: 105%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
    }

    .hover\:bg-base-200:hover,
    .hover\:bg-base-200\/50:hover {
      background-color: var(--color-base-200);
    }

    @supports (color: color-mix(in lab, red, red)) {
      .hover\:bg-base-200\/50:hover {
        background-color: color-mix(
          in oklab,
          var(--color-base-200) 50%,
          transparent
        );
      }
    }

    .hover\:shadow-md:hover {
      --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, #0000001a),
        0 2px 4px -2px var(--tw-shadow-color, #0000001a);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
        var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }

    .hover\:shadow-sm:hover {
      --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, #0000001a),
        0 1px 2px -1px var(--tw-shadow-color, #0000001a);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
        var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }

  @media (min-width: 40rem) {
    .sm\:ml-4 {
      margin-left: calc(var(--spacing) * 4);
    }

    .sm\:h-20 {
      height: calc(var(--spacing) * 20);
    }

    .sm\:w-20 {
      width: calc(var(--spacing) * 20);
    }

    .sm\:w-auto {
      width: auto;
    }

    .sm\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    .sm\:flex-row {
      flex-direction: row;
    }

    .sm\:border-t-0 {
      border-top-style: var(--tw-border-style);
      border-top-width: 0;
    }

    .sm\:border-l-2 {
      border-left-style: var(--tw-border-style);
      border-left-width: 2px;
    }

    .sm\:pt-0 {
      padding-top: calc(var(--spacing) * 0);
    }

    .sm\:pl-6 {
      padding-left: calc(var(--spacing) * 6);
    }

    .sm\:text-left {
      text-align: left;
    }

    .sm\:btn-md {
      --fontsize: 0.875rem;
      --btn-p: 1rem;
      --size: calc(var(--size-field, 0.25rem) * 10);
    }
  }

  @media (min-width: 48rem) {
    .md\:-mb-28 {
      margin-bottom: calc(var(--spacing) * -28);
    }

    .md\:grid {
      display: grid;
    }

    .md\:hidden {
      display: none;
    }

    .md\:h-56 {
      height: calc(var(--spacing) * 56);
    }

    .md\:w-56 {
      width: calc(var(--spacing) * 56);
    }

    .md\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    .md\:p-10 {
      padding: calc(var(--spacing) * 10);
    }

    .md\:py-12 {
      padding-block: calc(var(--spacing) * 12);
    }

    .md\: text-3xl {
      font-size: var(--text-3xl);
      line-height: var(--tw-leading, var(--text-3xl--line-height));
    }

    .md\:text-5xl {
      font-size: var(--text-5xl);
      line-height: var(--tw-leading, var(--text-5xl--line-height));
    }
  }

  @media (min-width: 64rem) {
    .lg\:mx-0 {
      margin-inline: calc(var(--spacing) * 0);
    }

    .lg\:max-w-\[33\%\] {
      max-width: 33%;
    }

    .lg\:min-w-\[120px\] {
      min-width: 120px;
    }

    .lg\:grid-cols-3 {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    .lg\:flex-row {
      flex-direction: row;
    }

    .lg\:items-center {
      align-items: center;
    }
  }

  @media (min-width: 80rem) {
    .xl\:mx-0 {
      margin-inline: calc(var(--spacing) * 0);
    }
  }
}

@keyframes radio {
  0% {
    padding: 5px;
  }

  50% {
    padding: 3px;
  }
}

@keyframes skeleton {
  0% {
    background-position: 150%;
  }

  to {
    background-position: -50%;
  }
}

@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}

@keyframes toast {
  0% {
    opacity: 0;
    scale: 0.9;
  }

  to {
    opacity: 1;
    scale: 1;
  }
}

@keyframes dropdown {
  0% {
    opacity: 0;
  }
}

@keyframes rating {
  0%,
  40% {
    filter: brightness(1.05) contrast(1.05);
    scale: 1.1;
  }
}

@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}

@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}

@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}

@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}

@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}

@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}

@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}

@property --tw-leading {
  syntax: "*";
  inherits: false;
}

@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}

@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}

@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}

@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}

@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}

@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}

@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0;
}

@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}

@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}

@property --tw-blur {
  syntax: "*";
  inherits: false;
}

@property --tw-brightness {
  syntax: "*";
  inherits: false;
}

@property --tw-contrast {
  syntax: "*";
  inherits: false;
}

@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}

@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}

@property --tw-invert {
  syntax: "*";
  inherits: false;
}

@property --tw-opacity {
  syntax: "*";
  inherits: false;
}

@property --tw-saturate {
  syntax: "*";
  inherits: false;
}

@property --tw-sepia {
  syntax: "*";
  inherits: false;
}

@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}

@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}

@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}

@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-blur {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-brightness {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-contrast {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-grayscale {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-hue-rotate {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-invert {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-opacity {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-saturate {
  syntax: "*";
  inherits: false;
}

@property --tw-backdrop-sepia {
  syntax: "*";
  inherits: false;
}

@property --tw-duration {
  syntax: "*";
  inherits: false;
}

@property --tw-scale-x {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

@property --tw-scale-y {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

@property --tw-scale-z {
  syntax: "*";
  inherits: false;
  initial-value: 1;
}

body {
  padding: 1rem;
}
