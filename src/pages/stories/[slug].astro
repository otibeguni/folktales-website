---
import { changeLanguage } from "i18next";
import Article from "@/components/Article.astro";
import Layout from "@/layouts/Layout.astro";
import type { IStory, MetadataItem } from "@/types";
import { fetchRowsFromDatabase } from "@/utils/baserow";

changeLanguage("en");

export async function getStaticPaths() {
    const baserowData = await fetchRowsFromDatabase(741, "&sources__join=author,url,library_url,slug&related_wikidata__join=type,slug,item&related_resources__join=type,url");
    const baserowResult = (await baserowData.results) as MetadataItem[];
    const stories: Array<{
        frontmatter: IStory;
        default: any;
    }> = Object.values(import.meta.glob("@/stories/en/*.md", { eager: true }));
    return stories.map((story) => ({
        params: { slug: story.frontmatter.slug },
        props: {
            story,
            baserow: baserowResult.find((item: MetadataItem) => item.slug === story.frontmatter.slug) ?? null,
        },
    }));
}
const { story, baserow } = Astro.props;
const { frontmatter } = story;
const currentUrl = new URL(Astro.url.pathname, Astro.site).toString();
// Prepare the isBasedOn data if applicable
const isBasedOn = baserow != null && baserow.sources?.length > 0 && baserow.sources[0].value
    ? {
        "@type": "CreativeWork",
        "name": baserow.sources[0].value,
        ...(baserow.sources[0].author && {
            "author": {
                "@type": "Person",
                "name": baserow.sources[0].author
            }
        })
    }
    : null;
const schemaData = {
    "@context": "https://schema.org",
    "@type": "CreativeWork",
    "name": frontmatter.title,
    "url": currentUrl,
    "author": {
        "@type": "Organization",
        "name": "Otibeguni"
    },
    ...(isBasedOn && { isBasedOn })
};
---

<Layout
  title={`${frontmatter.title} - Stories | Otibeguni `}
  schema={schemaData}
>
  <Article story={story} baserow={baserow} />
</Layout>
